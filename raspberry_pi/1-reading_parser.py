#!/usr/bin/python3
"""
This module parses the information contained in  log files generated by sensors
and writes into the local MySQL DB

We drop the high and low values and then average the remaining 8 readings

"""

import csv
import datetime
import json
import MySQLdb
import requests
import statistics
import sys

def get_moisture_reading():
    """
    Extracts moisture reading from moisture reading log; parses and cleans data
    """
    with open('soil_moisture.log') as f:
        log = csv.reader(f, delimiter='~')
        for row in log:
            if len(row) > 1:
                timestamp = row[0]
                reading_list = list(row[1:11])
        value_list = [int(x) for x in reading_list]
        moisture_value = statistics.mean(value_list[1:-1])
    return (timestamp, moisture_value)

def parse_to_dict(reading):
    """Takes reading and converts into native python dictionary"""
    payload = {}
    payload['reading_date'] = reading[0][0:10]
    payload['reading_time'] = reading[0][11:-7]
    payload['reading_dt'] = reading[0][:-7]
    payload['reading_value'] = reading[1]
    payload['plant_id'] = 1
    payload['user_id'] = 1
    payload['plantgroup_id'] = 1
    payload['reading_type'] = "soil_moisture"
    payload['reading_id'] = 0
    return payload

def save_to_localDB(reading):
    """Takes tuple and writes value and timestamp to database"""
    db = MySQLdb.Connect(db=sys.argv[3],
                         user=sys.argv[1],
                         passwd=sys.argv[2],
                         port=3306)
    c = db.cursor()
    query = ""
    # build query
    query += "INSERT INTO readings "
    query += "(`reading_dt`, `reading_date`, `reading_time`, `plant_id`, "
    query += "`user_id`, `reading_type`, `plantgroup_id`, `reading_value`) "
    query += "VALUES ('{}', '{}', '{}', {}, {}, '{}', {}, {}".format(
        str(reading["reading_dt"]), str(reading["reading_date"]),
        str(reading["reading_time"]), reading["plant_id"], reading["user_id"],
        reading["reading_type"], reading["plantgroup_id"], reading["reading_value"])
    query += ");"
    print(query)
    try:
        count = c.execute(query)
        db.commit()
    except:
        db.rollback()
    db.close()
    # print(count)
    # this is WIP

def make_json_payload(reading):
    """converts reading into a json payload for a post request to server"""
    # convert time stamp and reading into json object
    # return json object
    return(json.dumps(reading))

def post_request_to_server(payload):
    """makes post request to remote server with latest reading"""
    url = "http://52.90.202.94:5000/plant_data/update/"
    try:
        headers = {'Content-Type': 'application/json'}
        r = requests.post(url, payload, headers=headers)
    except ConnectionError:
        print("Connection Error")
    print(r.status_code)
    print(payload)


reading = get_moisture_reading()
reading_dict = parse_to_dict(reading)
save_to_localDB(reading_dict)
print(make_json_payload(reading_dict))
#post_request_to_server(payload)
